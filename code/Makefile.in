
# ADLB/X Makefile

# Usage notes:
# make V=1 turns on verbose output

# Products:
ADLB_A  = lib/libadlb.a
ADLB_SO = lib/libadlb.so
ADLB = $(ADLB_SO)

all: $(ADLB)

INSTALL_PREFIX  = @prefix@
INSTALL_ETC     = $(INSTALL_PREFIX)/etc
INSTALL_LIB     = $(INSTALL_PREFIX)/lib
INSTALL_INCLUDE = $(INSTALL_PREFIX)/include

# Verbosity control:
ifeq ($(V),1)
  QUIET_COMPILE = 0
else
  QUIET_COMPILE = 1
endif

ifeq ($(QUIET_COMPILE),1)
  # Prints a short description of the action, does not show command
  Q = @echo
  E = @
else
  # Just echo the entire command
  Q = @ :
  E =
endif

### FLAGS

CC  = @CC@
# Always link with gcc, even when using XLC
LINKER = gcc

AR      = @AR@
ARFLAGS = cr
RANLIB  = @RANLIB@

C_UTILS = @USE_C_UTILS@

INCLUDES = -I . -I src -I $(C_UTILS)/include

USE_XLC = @USE_XLC@
ifeq ($(USE_XLC),0)
#       Not XLC: GCC
        PIC = -fPIC
        STD = -std=gnu99
        SHARED = -shared
else
#       Using XLC
        PIC = -qpic
        STD =
        SHARED = -qmkshrobj
endif

# No logging
LDFLAGS  = @LDFLAGS@
CFLAGS  = @CFLAGS@ $(PIC) $(STD) $(INCLUDES) -g

LIBS := -L $(C_UTILS)/lib -l exmcutils

RPATH := -Wl,-rpath -Wl,$(C_UTILS)/lib

ENABLE_MPE = @ADLB_ENABLE_MPE@
MPE = @USE_MPE@
MPE_FLAGS  = @MPE_FLAGS@
ifeq ($(ENABLE_MPE),yes)
	CFLAGS += -D ENABLE_MPE $(MPE_FLAGS)
	LIBS += -L lib -lmpe -L $(MPE)
	RPATH += -Wl,-rpath -Wl,$(INSTALL_LIB)
        RPATH += -Wl,-rpath -Wl,$(MPE)
endif

### INCLUDES

SRCS :=
OBJS :=
DEPS :=
include src/module.mk

### DEPS

deps: $(DEPS)

ifeq (,$(filter clean deps,$(MAKECMDGOALS)))
  -include $(DEPS)
endif

# default rule for generating dependency files (deps)
%.d: %.c
	$(Q) "  DEP		$(@)"
	$(E) CC=$(CC) maint/depend.sh \
             $(dir $(<)) $(CFLAGS) $(<) > $(@)

### COMPILE

%.o: %.c
#       This gives a false autoscan warning for C++ (token 'CC'):
	$(Q) "  CC		$(@)"
	$(E) $(CC) $(CFLAGS) -c -o $(@) $(<)

### LINK

$(ADLB_A): $(OBJS)
	$(Q) "  AR		$(@)"
	$(E) $(AR) $(ARFLAGS) $(@) $(OBJS)
	$(E) $(RANLIB) $(@)

lib:
	$(E) mkdir -pv lib

$(ADLB_SO): $(OBJS) $(NLOBJS) lib
	$(Q) "  LINK		$(@)"
	$(E) $(LINKER) -shared -fPIC -g			\
	        $(OBJS) 				\
                $(LIBS)                                 \
	        -L $(C_UTILS)/lib 	\
	        -l exmcutils \
	        $(RPATH) \
	        -o $(@)
#       Touch this so re-installation has the correct source directory
	$(E) touch source.txt

### APPS

# This gives a false autoscan warning for token 'install'
apps/%.x: apps/%.o install
	$(Q) "  LINK		$(@)"
	$(E) $(CC) $(CFLAGS) -o $(@) $(<) $(LDFLAGS) \
             -L lib -l adlb $(LIBS) \
	     $(RPATH)

### INSTALL

HAVE_CP_U = @CP_U@
ifeq ($(HAVE_CP_U),yes)
	CP_ARGS = -uvf
else
	CP_ARGS = -vf
endif

PROVENANCE = version.txt source.txt config.log

install: $(ADLB)
	$(Q)
	$(Q) "  INSTALL		$(INSTALL_PREFIX)"
	$(E) mkdir -pv $(INSTALL_ETC)
	$(E) mkdir -pv $(INSTALL_INCLUDE)
	$(E) mkdir -pv $(INSTALL_LIB)
	$(E) cp $(CP_ARGS) $(PROVENANCE) $(INSTALL_ETC)
	$(E) cp $(CP_ARGS) src/adlb.h $(INSTALL_INCLUDE)
	$(E) cp $(CP_ARGS) src/adlb-defs.h $(INSTALL_INCLUDE)
	$(E) cp $(CP_ARGS) $(ADLB) $(INSTALL_LIB)
	$(Q)

### CLEAN

clean:
	$(Q) "  CLEAN"
	$(E) rm -fv $(OBJS) $(ADLB) $(DEPS)
